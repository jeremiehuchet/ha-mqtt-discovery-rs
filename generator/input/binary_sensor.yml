availability:
  description: A list of MQTT topics subscribed to receive availability (online/offline)
    updates. Must not be used together with `availability_topic`.
  keys:
    payload_available:
      default: online
      description: The payload that represents the available state.
      required: false
      type: string
    payload_not_available:
      default: offline
      description: The payload that represents the unavailable state.
      required: false
      type: string
    topic:
      description: An MQTT topic subscribed to receive availability (online/offline)
        updates.
      required: true
      type: string
    value_template:
      description: Defines a [template](/docs/configuration/templating/#using-value-templates-with-mqtt)
        to extract device's availability from the `topic`. To determine the devices's
        availability result of this template will be compared to `payload_available`
        and `payload_not_available`.
      required: false
      type: template
  required: false
  type: list
availability_mode:
  default: latest
  description: When `availability` is configured, this controls the conditions needed
    to set the entity to `available`. Valid entries are `all`, `any`, and `latest`.
    If set to `all`, `payload_available` must be received on all configured availability
    topics before the entity is marked as online. If set to `any`, `payload_available`
    must be received on at least one configured availability topic before the entity
    is marked as online. If set to `latest`, the last `payload_available` or `payload_not_available`
    received on any configured availability topic controls the availability.
  required: false
  type: string
availability_template:
  description: Defines a [template](/docs/configuration/templating/#using-value-templates-with-mqtt)
    to extract device's availability from the `availability_topic`. To determine the
    devices's availability result of this template will be compared to `payload_available`
    and `payload_not_available`.
  required: false
  type: template
availability_topic:
  description: The MQTT topic subscribed to receive birth and LWT messages from the
    MQTT device. If `availability` is not defined, the binary sensor will always be
    considered `available` and its state will be `on`, `off` or `unknown`. If `availability`
    is defined, the binary sensor will be considered as `unavailable` by default and
    the sensor's initial state will be `unavailable`. Must not be used together with
    `availability`.
  required: false
  type: string
device:
  description: Information about the device this binary sensor is a part of to tie
    it into the [device registry](https://developers.home-assistant.io/docs/device_registry_index/).
    Only works when [`unique_id`](#unique_id) is set. At least one of identifiers
    or connections must be present to identify the device.
  keys:
    configuration_url:
      description: A link to the webpage that can manage the configuration of this
        device. Can be either an `http://`, `https://` or an internal `homeassistant://`
        URL.
      required: false
      type: string
    connections:
      description: 'A list of connections of the device to the outside world as a
        list of tuples `[connection_type, connection_identifier]`. For example the
        MAC address of a network interface: `"connections": [["mac", "02:5b:26:a8:dc:12"]]`.'
      required: false
      type: list
    hw_version:
      description: The hardware version of the device.
      required: false
      type: string
    identifiers:
      description: A list of IDs that uniquely identify the device. For example a
        serial number.
      required: false
      type:
      - list
      - string
    manufacturer:
      description: The manufacturer of the device.
      required: false
      type: string
    model:
      description: The model of the device.
      required: false
      type: string
    model_id:
      description: The model identifier of the device.
      required: false
      type: string
    name:
      description: The name of the device.
      required: false
      type: string
    serial_number:
      description: The serial number of the device.
      required: false
      type: string
    suggested_area:
      description: Suggest an area if the device isnâ€™t in one yet.
      required: false
      type: string
    sw_version:
      description: The firmware version of the device.
      required: false
      type: string
    via_device:
      description: Identifier of a device that routes messages between this device
        and Home Assistant. Examples of such devices are hubs, or parent devices of
        a sub-device. This is used to show device topology in Home Assistant.
      required: false
      type: string
  required: false
  type: map
device_class:
  description: Sets the [class of the device](/integrations/binary_sensor/#device-class),
    changing the device state and icon that is displayed on the frontend. The `device_class`
    can be `null`.
  required: false
  type: string
enabled_by_default:
  default: true
  description: Flag which defines if the entity should be enabled when first added.
  required: false
  type: boolean
encoding:
  default: utf-8
  description: The encoding of the payloads received. Set to `""` to disable decoding
    of incoming payload.
  required: false
  type: string
entity_category:
  description: The [category](https://developers.home-assistant.io/docs/core/entity/#generic-properties)
    of the entity. When set, the entity category must be `diagnostic` for sensors.
  required: false
  type: string
entity_picture:
  description: Picture URL for the entity.
  required: false
  type: string
expire_after:
  description: If set, it defines the number of seconds after the sensor's state expires
    if it's not updated. After expiry, the sensor's state becomes `unavailable`. By
    default, the sensor's state never expires. Note that when a sensor's value was
    sent retained to the MQTT broker, the last value sent will be replayed by the
    MQTT broker when Home Assistant restarts or is reloaded. As this could cause the
    sensor to become available with an expired state, it is not recommended to retain
    the sensor's state payload at the MQTT broker. Home Assistant will store and restore
    the sensor's state for you and calculate the remaining time to retain the sensor's
    state before it becomes unavailable.
  required: false
  type: integer
force_update:
  default: false
  description: Sends update events (which results in update of [state object](/docs/configuration/state_object/)'s
    `last_changed`) even if the sensor's state hasn't changed. Useful if you want
    to have meaningful value graphs in history or want to create an automation that
    triggers on *every* incoming state message (not only when the sensor's new state
    is different to the current one).
  required: false
  type: boolean
icon:
  description: '[Icon](/docs/configuration/customizing-devices/#icon) for the entity.'
  required: false
  type: icon
json_attributes_template:
  description: Defines a [template](/docs/configuration/templating/#using-value-templates-with-mqtt)
    to extract the JSON dictionary from messages received on the `json_attributes_topic`.
    Usage example can be found in [MQTT sensor](/integrations/sensor.mqtt/#json-attributes-template-configuration)
    documentation.
  required: false
  type: template
json_attributes_topic:
  description: The MQTT topic subscribed to receive a JSON dictionary payload and
    then set as sensor attributes. Usage example can be found in [MQTT sensor](/integrations/sensor.mqtt/#json-attributes-topic-configuration)
    documentation.
  required: false
  type: string
name:
  default: MQTT binary sensor
  description: The name of the binary sensor. Can be set to `null` if only the device
    name is relevant.
  required: false
  type: string
object_id:
  description: Used `object_id` instead of `name` for automatic generation of `entity_id`.
    This only works when the entity is added for the first time. When set, this overrides
    a user-customized Entity ID in case the entity was deleted and added again.
  required: false
  type: string
off_delay:
  description: For sensors that only send `on` state updates (like PIRs), this variable
    sets a delay in seconds after which the sensor's state will be updated back to
    `off`.
  required: false
  type: integer
payload_available:
  default: online
  description: The string that represents the `online` state.
  required: false
  type: string
payload_not_available:
  default: offline
  description: The string that represents the `offline` state.
  required: false
  type: string
payload_off:
  default: 'OFF'
  description: The string that represents the `off` state. It will be compared to
    the message in the `state_topic` (see `value_template` for details)
  required: false
  type: string
payload_on:
  default: 'ON'
  description: The string that represents the `on` state. It will be compared to the
    message in the `state_topic` (see `value_template` for details)
  required: false
  type: string
platform:
  description: Must be `binary_sensor`. Only allowed and required in [MQTT auto discovery
    device messages](/integrations/mqtt/#device-discovery-payload).
  required: true
  type: string
qos:
  default: 0
  description: The maximum QoS level to be used when receiving and publishing messages.
  required: false
  type: integer
state_topic:
  description: The MQTT topic subscribed to receive sensor's state. Valid states are
    `OFF` and `ON`. Custom `OFF` and `ON` values can be set with the `payload_off`
    and `payload_on` config options.
  required: true
  type: string
unique_id:
  description: An ID that uniquely identifies this sensor. If two sensors have the
    same unique ID, Home Assistant will raise an exception. Required when used with
    device-based discovery.
  required: false
  type: string
value_template:
  description: Defines a [template](/docs/configuration/templating/#using-value-templates-with-mqtt)
    that returns a string to be compared to `payload_on`/`payload_off` or an empty
    string, in which case the MQTT message will be removed. Remove this option when
    `payload_on` and `payload_off` are sufficient to match your payloads (i.e no preprocessing
    of original message is required).
  required: false
  type: template
