availability:
  description: A list of MQTT topics subscribed to receive availability (online/offline)
    updates. Must not be used together with `availability_topic`.
  keys:
    payload_available:
      default: online
      description: The payload that represents the available state.
      required: false
      type: string
    payload_not_available:
      default: offline
      description: The payload that represents the unavailable state.
      required: false
      type: string
    topic:
      description: An MQTT topic subscribed to receive availability (online/offline)
        updates.
      required: true
      type: string
    value_template:
      description: Defines a [template](/docs/configuration/templating/#using-value-templates-with-mqtt)
        to extract device's availability from the `topic`. To determine the devices's
        availability result of this template will be compared to `payload_available`
        and `payload_not_available`.
      required: false
      type: template
  required: false
  type: list
availability_mode:
  default: latest
  description: When `availability` is configured, this controls the conditions needed
    to set the entity to `available`. Valid entries are `all`, `any`, and `latest`.
    If set to `all`, `payload_available` must be received on all configured availability
    topics before the entity is marked as online. If set to `any`, `payload_available`
    must be received on at least one configured availability topic before the entity
    is marked as online. If set to `latest`, the last `payload_available` or `payload_not_available`
    received on any configured availability topic controls the availability.
  required: false
  type: string
availability_template:
  description: Defines a [template](/docs/configuration/templating/#using-value-templates-with-mqtt)
    to extract device's availability from the `availability_topic`. To determine the
    devices's availability result of this template will be compared to `payload_available`
    and `payload_not_available`.
  required: false
  type: template
availability_topic:
  description: The MQTT topic subscribed to receive availability (online/offline)
    updates. Must not be used together with `availability`.
  required: false
  type: string
available_tones:
  description: A list of available tones the siren supports. When configured, this
    enables the support for setting a `tone` and enables the `tone` state attribute.
  required: false
  type: list
command_off_template:
  description: Defines a [template](/docs/configuration/templating/#using-command-templates-with-mqtt)
    to generate a custom payload to send to `command_topic` when the siren turn off
    action is called. By default `command_template` will be used as template for action
    turn off. The variable `value` will be assigned with the configured `payload_off`
    setting.
  required: false
  type: template
command_template:
  description: Defines a [template](/docs/configuration/templating/#using-command-templates-with-mqtt)
    to generate a custom payload to send to `command_topic`. The variable `value`
    will be assigned with the configured `payload_on` or `payload_off` setting. The
    siren turn on action parameters `tone`, `volume_level` or `duration` can be used
    as variables in the template. When operation in optimistic mode the corresponding
    state attributes will be set. Turn on parameters will be filtered if a device
    misses the support.
  required: false
  type: template
command_topic:
  description: |
    The MQTT topic to publish commands to change the siren state. Without command templates, a default JSON payload like `{"state":"ON", "tone": "bell", "duration": 10, "volume_level": 0.5 }` is published. When the siren turn on action is performed, the startup parameters will be added to the JSON payload. The `state` value of the JSON payload will be set to the the `payload_on` or `payload_off` configured payload.
  required: false
  type: string
device:
  description: Information about the device this siren is a part of to tie it into
    the [device registry](https://developers.home-assistant.io/docs/en/device_registry_index.html).
    Only works when [`unique_id`](#unique_id) is set. At least one of identifiers
    or connections must be present to identify the device.
  keys:
    configuration_url:
      description: A link to the webpage that can manage the configuration of this
        device. Can be either an `http://`, `https://` or an internal `homeassistant://`
        URL.
      required: false
      type: string
    connections:
      description: 'A list of connections of the device to the outside world as a
        list of tuples `[connection_type, connection_identifier]`. For example the
        MAC address of a network interface: `"connections": [["mac", "02:5b:26:a8:dc:12"]]`.'
      required: false
      type: list
    hw_version:
      description: The hardware version of the device.
      required: false
      type: string
    identifiers:
      description: A list of IDs that uniquely identify the device. For example a
        serial number.
      required: false
      type:
      - string
      - list
    manufacturer:
      description: The manufacturer of the device.
      required: false
      type: string
    model:
      description: The model of the device.
      required: false
      type: string
    model_id:
      description: The model identifier of the device.
      required: false
      type: string
    name:
      description: The name of the device.
      required: false
      type: string
    serial_number:
      description: The serial number of the device.
      required: false
      type: string
    suggested_area:
      description: Suggest an area if the device isnâ€™t in one yet.
      required: false
      type: string
    sw_version:
      description: The firmware version of the device.
      required: false
      type: string
    via_device:
      description: Identifier of a device that routes messages between this device
        and Home Assistant. Examples of such devices are hubs, or parent devices of
        a sub-device. This is used to show device topology in Home Assistant.
      required: false
      type: string
  required: false
  type: map
enabled_by_default:
  default: true
  description: Flag which defines if the entity should be enabled when first added.
  required: false
  type: boolean
encoding:
  default: utf-8
  description: The encoding of the payloads received and published messages. Set to
    `""` to disable decoding of incoming payload.
  required: false
  type: string
entity_category:
  description: The [category](https://developers.home-assistant.io/docs/core/entity#generic-properties)
    of the entity.
  required: false
  type: string
entity_picture:
  description: Picture URL for the entity.
  required: false
  type: string
icon:
  description: '[Icon](/docs/configuration/customizing-devices/#icon) for the entity.'
  required: false
  type: icon
json_attributes_template:
  description: Defines a [template](/docs/configuration/templating/#using-value-templates-with-mqtt)
    to extract the JSON dictionary from messages received on the `json_attributes_topic`.
    Usage example can be found in [MQTT sensor](/integrations/sensor.mqtt/#json-attributes-template-configuration)
    documentation.
  required: false
  type: template
json_attributes_topic:
  description: The MQTT topic subscribed to receive a JSON dictionary payload and
    then set as sensor attributes. Usage example can be found in [MQTT sensor](/integrations/sensor.mqtt/#json-attributes-topic-configuration)
    documentation.
  required: false
  type: string
name:
  default: MQTT Siren
  description: The name to use when displaying this siren. Can be set to `null` if
    only the device name is relevant.
  required: false
  type: string
object_id:
  description: Used `object_id` instead of `name` for automatic generation of `entity_id`.
    This only works when the entity is added for the first time. When set, this overrides
    a user-customized Entity ID in case the entity was deleted and added again.
  required: false
  type: string
optimistic:
  default: '`true` if no `state_topic` defined, else `false`.'
  description: Flag that defines if siren works in optimistic mode.
  required: false
  type: boolean
payload_available:
  default: online
  description: The payload that represents the available state.
  required: false
  type: string
payload_not_available:
  default: offline
  description: The payload that represents the unavailable state.
  required: false
  type: string
payload_off:
  default: 'OFF'
  description: The payload that represents `off` state. If specified, will be used
    for both comparing to the value in the `state_topic` (see `value_template` and
    `state_off` for details) and sending as `off` command to the `command_topic`.
  required: false
  type: string
payload_on:
  default: 'ON'
  description: The payload that represents `on` state. If specified, will be used
    for both comparing to the value in the `state_topic` (see `value_template` and
    `state_on`  for details) and sending as `on` command to the `command_topic`.
  required: false
  type: string
platform:
  description: Must be `siren`. Only allowed and required in [MQTT auto discovery
    device messages](/integrations/mqtt/#device-discovery-payload).
  required: true
  type: string
qos:
  default: 0
  description: The maximum QoS level to be used when receiving and publishing messages.
  required: false
  type: integer
retain:
  default: false
  description: If the published message should have the retain flag on or not.
  required: false
  type: boolean
state_off:
  default: '`payload_off` if defined, else `''OFF''`'
  description: The payload that represents the `off` state. Used when value that represents
    `off` state in the `state_topic` is different from value that should be sent to
    the `command_topic` to turn the device `off`.
  required: false
  type: string
state_on:
  default: '`payload_on` if defined, else `''ON''`'
  description: The payload that represents the `on` state. Used when value that represents
    `on` state in the `state_topic` is different from value that should be sent to
    the `command_topic` to turn the device `on`.
  required: false
  type: string
state_topic:
  description: The MQTT topic subscribed to receive state updates. The state update
    may be either JSON or a simple string. When a JSON payload is detected, the `state`
    value of the JSON payload should supply the `payload_on` or `payload_off` defined
    payload to turn the siren on or off. Additionally, the state attributes `duration`,
    `tone` and `volume_level` can be updated. Use `value_template` to transform the
    received state update to a compliant JSON payload. Attributes will only be set
    if the function is supported by the device and a valid value is supplied. When
    a non JSON payload is detected, it should be either of the `payload_on` or `payload_off`
    defined payloads or `None` to reset the siren's state to `unknown`. The initial
    state will be `unknown`. The state will be reset to `unknown` if a `None` payload
    or `null` JSON value is received as a state update.
  required: false
  type: string
state_value_template:
  description: Defines a [template](/docs/configuration/templating/#using-value-templates-with-mqtt)
    to extract device's state from the `state_topic`. To determine the siren's state
    result of this template will be compared to `state_on` and `state_off`. Alternatively
    `value_template` can be used to render to a valid JSON payload.
  required: false
  type: template
support_duration:
  default: true
  description: Set to `true` if the MQTT siren supports the `duration` turn on action
    parameter and enables the `duration` state attribute.
  required: false
  type: boolean
support_volume_set:
  default: true
  description: Set to `true` if the MQTT siren supports the `volume_set` turn on action
    parameter and enables the `volume_level` state attribute.
  required: false
  type: boolean
unique_id:
  description: An ID that uniquely identifies this siren device. If two sirens have
    the same unique ID, Home Assistant will raise an exception. Required when used
    with device-based discovery.
  required: false
  type: string
