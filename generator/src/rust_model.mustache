/// {{{ comment entityDoc }}}
#[derive(Clone, Debug, PartialEq, Serialize, Builder)]
pub struct {{ toPascalCase entityName }} {
    /// Replaces `~` with this value in any MQTT topic attribute.
    /// [See Home Assistant documentation](https://www.home-assistant.io/integrations/mqtt/#using-abbreviations-and-base-topic)
    #[serde(rename = "~", skip_serializing_if = "Option::is_none")]
    #[builder(into)]
    pub topic_prefix: Option<String>,

    /// It is encouraged to add additional information about the origin that supplies MQTT entities via MQTT discovery by adding the origin option (can be abbreviated to o) to the discovery payload. Note that these options also support abbreviations. Information of the origin will be logged to the core event log when an item is discovered or updated.
    #[serde(rename = "o", skip_serializing_if = "Option::is_none")]
    pub origin: Option<Origin>,

    /// Information about the device this button is a part of to tie it into the [device registry](https://developers.home-assistant.io/docs/en/device_registry_index.html). Only works when [`unique_id`](#unique_id) is set. At least one of identifiers or connections must be present to identify the device.
    #[serde(rename = "dev", skip_serializing_if = "Option::is_none")]
    pub device: Option<DeviceInformation>,

    /// A list of MQTT topics subscribed to receive availability (online/offline) updates. Must not be used together with `availability_topic`.
    #[serde(flatten, skip_serializing_if = "Option::is_none")]
    pub availability: Option<Availability>,

    /// The category of the entity. (optional, default: None)
    #[serde(rename = "ent_cat", skip_serializing_if = "Option::is_none")]
    pub entity_category: Option<EntityCategory>,

    {{#each properties }}
    /// {{{ comment description }}}
    {{#if required}}
    #[serde(rename = "{{ abbreviation @key }}")]
    {{else}}
    #[serde(rename = "{{ abbreviation @key }}", skip_serializing_if = "Option::is_none")]
    {{/if}}
    {{#if useInto}}
    #[builder(into)]
    {{/if}}
    pub {{ rustSafeName }}: {{#unless required}}Option<{{/unless}}{{#if iterable }}Vec<{{/if}}{{{ rustType }}}{{#if iterable }}>{{/if}}{{#unless required}}>{{/unless}},

    {{/each }}
}

impl From<{{ toPascalCase entityName }}> for Entity {
    fn from(value: {{ toPascalCase entityName }}) -> Self {
        Entity::{{ toPascalCase entityName }}(value)
    }
}